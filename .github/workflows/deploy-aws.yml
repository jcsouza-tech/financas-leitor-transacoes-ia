name: Deploy to AWS ECS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - hml
          - prod
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'
        type: string

env:
  DOCKER_IMAGE_NAME: financas-leitor-transacoes-ia
  ECS_CLUSTER_PREFIX: financas-leitor-ia

jobs:
  validate-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate production deployment
      if: github.event.inputs.environment == 'prod'
      run: |
        # Check if image tag matches semantic version pattern
        if [[ ! "${{ github.event.inputs.image_tag }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Production deployments require semantic version tags (e.g., v1.0.0)"
          echo "Current tag: ${{ github.event.inputs.image_tag }}"
          exit 1
        fi
        echo "‚úÖ Production tag validation passed: ${{ github.event.inputs.image_tag }}"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ github.event.inputs.environment == 'dev' && secrets.AWS_DEV_ACCESS_KEY_ID || github.event.inputs.environment == 'hml' && secrets.AWS_HML_ACCESS_KEY_ID || secrets.AWS_PROD_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ github.event.inputs.environment == 'dev' && secrets.AWS_DEV_SECRET_ACCESS_KEY || github.event.inputs.environment == 'hml' && secrets.AWS_HML_SECRET_ACCESS_KEY || secrets.AWS_PROD_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.environment == 'dev' && secrets.AWS_DEV_REGION || github.event.inputs.environment == 'hml' && secrets.AWS_HML_REGION || secrets.AWS_PROD_REGION }}
        
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Pull Docker image
      run: |
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.event.inputs.image_tag }}
        echo "‚úÖ Successfully pulled image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
        
    - name: Get current task definition
      id: get-task-def
      run: |
        TASK_DEFINITION=$(aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_CLUSTER_PREFIX }}-task-${{ github.event.inputs.environment }} \
          --query 'taskDefinition')
        echo "task-definition<<EOF" >> $GITHUB_OUTPUT
        echo "$TASK_DEFINITION" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Update task definition with new image
      id: update-task-def
      run: |
        # Parse the task definition and update the image
        NEW_TASK_DEF=$(echo '${{ steps.get-task-def.outputs.task-definition }}' | \
          jq --arg IMAGE "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.event.inputs.image_tag }}" \
          '.containerDefinitions[0].image = $IMAGE | 
           .containerDefinitions[0].name = "${{ env.DOCKER_IMAGE_NAME }}" |
           del(.taskDefinitionArn) |
           del(.revision) |
           del(.status) |
           del(.requiresAttributes) |
           del(.placementConstraints) |
           del(.compatibilities) |
           del(.registeredAt) |
           del(.registeredBy)')
        
        echo "task-definition<<EOF" >> $GITHUB_OUTPUT
        echo "$NEW_TASK_DEF" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Register new task definition
      id: register-task-def
      run: |
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json '${{ steps.update-task-def.outputs.task-definition }}' \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "task-definition-arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT
        echo "‚úÖ Registered new task definition: $NEW_TASK_DEF_ARN"
        
    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER_PREFIX }}-${{ github.event.inputs.environment }} \
          --service ${{ env.ECS_CLUSTER_PREFIX }}-service-${{ github.event.inputs.environment }} \
          --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }}
        echo "‚úÖ Updated ECS service with new task definition"
        
    - name: Wait for service stability
      run: |
        echo "‚è≥ Waiting for service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER_PREFIX }}-${{ github.event.inputs.environment }} \
          --services ${{ env.ECS_CLUSTER_PREFIX }}-service-${{ github.event.inputs.environment }}
        echo "‚úÖ Service is stable"
        
    - name: Get service status
      run: |
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER_PREFIX }}-${{ github.event.inputs.environment }} \
          --services ${{ env.ECS_CLUSTER_PREFIX }}-service-${{ github.event.inputs.environment }} \
          --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount}' \
          --output table)
        echo "üìä Service Status:"
        echo "$SERVICE_STATUS"
        
    - name: Deployment summary
      run: |
        echo "üéâ Deployment completed successfully!"
        echo ""
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
        echo "Task Definition: ${{ steps.register-task-def.outputs.task-definition-arn }}"
        echo "Cluster: ${{ env.ECS_CLUSTER_PREFIX }}-${{ github.event.inputs.environment }}"
        echo "Service: ${{ env.ECS_CLUSTER_PREFIX }}-service-${{ github.event.inputs.environment }}"
